/* Generated By:JavaCC: Do not edit this line. MyNewGrammar.java */
package javacccc;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileReader;

public class MyNewGrammar implements MyNewGrammarConstants {
        public static void main(String[] args) throws ParseException, IOException
        {
                MyNewGrammar parser = new MyNewGrammar(System.in);

                FileOutputStream output1 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_conv_layer.txt");
                FileOutputStream output2 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_avg_pool_layer.txt");
                FileOutputStream output3 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_deconv_layer.txt");
                FileOutputStream output4 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_simple_recurrent_network.txt");
                FileOutputStream output5 = new FileOutputStream(System.getProperty("user.dir")+"/graph_resnet.txt");
                FileOutputStream output6 = new FileOutputStream(System.getProperty("user.dir")+"/graph_google_net.txt");

                System.out.println("<< input fragment_conv_layer >>");
                String res = parser.one_line();
                String[] arr = res.split("\u005cn");
                System.out.println("******************************************");
                System.out.println(res);
                for(int i=0;i<arr.length;i++)
                        output1.write((arr[i] + "\u005cr\u005cn").getBytes());

                System.out.println("parser start!");
                System.out.println("<< input fragment_avg_pool_layer >>");
                res = parser.one_line();
                arr = res.split("\u005cn");
                System.out.println("******************************************");
                System.out.println(res);
                for(int i=0;i<arr.length;i++)
                        output2.write((arr[i] + "\u005cr\u005cn").getBytes());

                System.out.println("<< input fragment_deconv_layer >>");
                res = parser.one_line();
                arr = res.split("\u005cn");
                System.out.println("******************************************");
                System.out.println(res);
                for(int i=0;i<arr.length;i++)
                        output3.write((arr[i] + "\u005cr\u005cn").getBytes());

                System.out.println("<< input fragment_simple_recurrent_network >>");
                res = parser.one_line();
                arr = res.split("\u005cn");
                System.out.println("******************************************");
                System.out.println(res);
                for(int i=0;i<arr.length;i++)
                        output4.write((arr[i] + "\u005cr\u005cn").getBytes());

                System.out.println("<< input graph_ResNet >>");
                res = parser.one_line();
                arr = res.split("\u005cn");
                System.out.println("******************************************");
                System.out.println(res);
                for(int i=0;i<arr.length;i++)
                        output5.write((arr[i] + "\u005cr\u005cn").getBytes());

                System.out.println("<< input graph_GoogleNet >>");
                res = parser.one_line();
                arr = res.split("\u005cn");
                System.out.println("******************************************");
                System.out.println(res);
                for(int i=0;i<arr.length;i++)
                        output6.write((arr[i] + "\u005cr\u005cn").getBytes());


        }

  final public String extension() throws ParseException {
  String result = "";
  Token token = null;
  Token token_iter = null;
  System.out.println("extension() called!");
    token = jj_consume_token(EXTENSION);
    label_1:
    while (true) {
      token_iter = jj_consume_token(IDENTIFIER);
                                                      result += token_iter.toString();
      if (jj_2_1(6)) {
        ;
      } else {
        break label_1;
      }
    }
    jj_consume_token(SEMI_COLON);
    {if (true) return token.toString() + " " + result;}
    throw new Error("Missing return statement in function");
  }

  final public String version() throws ParseException {
  String result = "";
  Token token = null;
  Token token_iter = null;
  System.out.println("version() called!");
    token = jj_consume_token(VERSION);
    token_iter = jj_consume_token(NUMERIC_LITERAL);
                                                        result += token_iter.toString();
    jj_consume_token(SEMI_COLON);
    {if (true) return token.toString() + result;}
    throw new Error("Missing return statement in function");
  }

  final public String document() throws ParseException {
  String s = "";
  String result = "";
  String s_iter = "";
  System.out.println("document() called!");
    s = version();
                  result += s;
    label_2:
    while (true) {
      if (jj_2_2(6)) {
        ;
      } else {
        break label_2;
      }
      s_iter = extension();
                                                         result += s_iter;
    }
    label_3:
    while (true) {
      if (jj_2_3(6)) {
        ;
      } else {
        break label_3;
      }
      s_iter = fragment_definition();
                                                                                                                 result += s_iter;
    }
    s = graph_definition();
                                                                                                                                                                result += s;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

//  lval rval************************************************
  final public String assignment() throws ParseException {
  String result = "";
  String s = "";
  String i = "";
  System.out.println("assignment() called!");
    s = lvalue_expr();
                      result += s;
    jj_consume_token(ASSIGN);
                                            result += " = ";
    s = rvalue_expr();
    jj_consume_token(SEMI_COLON);
      result = result + s + i; {if (true) return result + ";\u005cn";}
    throw new Error("Missing return statement in function");
  }

/*
String rvalue_expr():
{
  System.out.println("rvalue_expr() called!");
}
{
    invocation() | paren_expr() | literal() | array_rvalue_expr() | binary_expr()| unary_expr()
  					 | tuple_rvalue_expr()
  					 | subscript_expr() | if_else_expr() | comprehension_expr()
  					 | builtin_expr()
}
*/
  final public String rvalue_expr() throws ParseException {
  String s = "";
  String result = "";
    if (jj_2_4(6)) {
      s = identifier_invocation();
                                      result += s;
      s = rvalue_expr2();
                                                                          result += s; {if (true) return result;}
    } else if (jj_2_5(6)) {
      s = paren_tuple();
                        result += s;
      s = rvalue_expr2();
                                                            result += s; {if (true) return result;}
    } else if (jj_2_6(6)) {
      s = array_comprehension();
                                result += s;
      s = rvalue_expr2();
                                                                    result += s; {if (true) return result;}
    } else if (jj_2_7(6)) {
      s = literal();
                    result += s;
      s = rvalue_expr2();
                                                        result += s; {if (true) return result;}
    } else if (jj_2_8(6)) {
      s = unary_expr();
                       result += s;
      s = rvalue_expr2();
                                                           result += s; {if (true) return result;}
    } else if (jj_2_9(6)) {
      s = builtin_expr();
                         result += s;
      s = rvalue_expr2();
                                                             result += s; {if (true) return result;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String identifier_invocation() throws ParseException {
  Token id = null;
  String Result = "";
  String name = "";
  String s = "";
    id = jj_consume_token(IDENTIFIER);
      name = id.toString();
    switch(name){
      case "variable":
        Result += " tf.Variable";
        break;
      case "avg_pool":
      Result += " tf.nn.avg_pool";
        break;
      case "constant":
      Result += " tf.constant";
        break;
      case "conv":
      Result += " tf.layers.conv2d";
        break;
      case "deconv":
      Result += " tf.layers.conv2d_transpose";
        break;
      case "concat":
      Result += " tf.concat";
        break;
      case "tanh":
      Result += " tf.tanh";
        break;
      case "sigmoid":
            Result += " tf.sigmoid";
        break;
      case "relu":
      Result += " tf.nn.relu";
        break;
      case "conv_layer":
      Result += " tf.nn.conv2d";
        break;
      case "max_pool_layer":
            Result += " tf.nn.max_pool";
        break;
      case "max_pool":
      Result += " tf.nn.max_pool";
      break;
      case "reshape":
      Result += " tf.reshape";
        break;
      case "matmul":
      Result += " tf.matmul";
        break;
      case "local_response_normalization":
        Result += " tf.nn.local_response_normalization";
        break;
      case "dropout":
      Result += " tf.nn.dropout";
        break;
      case "add":
      Result += " tf.add";
        break;
      case "softmax":
      Result += " tf.nn.softmax";
        break;
      default:
        Result += " " + name;
        break;
    }
    if (jj_2_10(6)) {
      s = invocation2();
                         Result += s;
    } else {

    }
    {if (true) return Result;}
    throw new Error("Missing return statement in function");
  }

  final public String invocation2() throws ParseException {
  String s = "";
    System.out.println("invocation() called!");
    jj_consume_token(L_PAREN);
    s = argument_list();
    jj_consume_token(R_PAREN);
                                               {if (true) return "(" + s + ")";}
    throw new Error("Missing return statement in function");
  }

  final public String paren_tuple() throws ParseException {
  String s = "";
  String result = "";
    jj_consume_token(L_PAREN);
    if (jj_2_11(6)) {
      s = paren_expr2();
                                    result += s;
    } else if (jj_2_12(6)) {
      s = tuple_rvalue_expr2();
                               result += s;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                                                 {if (true) return "(" + result + ")";}
    throw new Error("Missing return statement in function");
  }

  final public String paren_expr2() throws ParseException {
  String s = "";
  System.out.println("paren_expr() called!");
    s = rvalue_expr();
    jj_consume_token(R_PAREN);
                                {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String tuple_rvalue_expr2() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("tuple_rvalue_expr() called!");
    s = rvalue_expr();
    label_4:
    while (true) {
      jj_consume_token(COMMA);
                           result += ", ";
      s_iter = rvalue_expr();
                                                                      result += s_iter;
      if (jj_2_13(6)) {
        ;
      } else {
        break label_4;
      }
    }
    jj_consume_token(R_PAREN);
    {if (true) return s + result;}
    throw new Error("Missing return statement in function");
  }

  final public String array_comprehension() throws ParseException {
  String s = "";
    jj_consume_token(L_BRACKET);
    if (jj_2_14(6)) {
      s = array_rvalue_expr2();
    } else if (jj_2_15(6)) {
      s = comprehension_expr2();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return "[" + s + "]";}
    throw new Error("Missing return statement in function");
  }

  final public String array_rvalue_expr2() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("array_rvalue_expr() called!");
    if (jj_2_17(6)) {
      s = rvalue_expr();
      label_5:
      while (true) {
        if (jj_2_16(6)) {
          ;
        } else {
          break label_5;
        }
        jj_consume_token(COMMA);
        s_iter = rvalue_expr();
                                                  result = result + ", " + s_iter;
      }
    } else {
      ;
    }
    jj_consume_token(R_BRACKET);
    {if (true) return s + result;}
    throw new Error("Missing return statement in function");
  }

//----------------------------
  final public String comprehension_expr2() throws ParseException {
  String result = "";
  System.out.println("comprehension_expr() called!");
    jj_consume_token(FOR);
    loop_iter_list();
    if (jj_2_18(6)) {
      jj_consume_token(IF);
      rvalue_expr();
    } else {
      ;
    }
    jj_consume_token(YIELD);
    rvalue_expr();
    jj_consume_token(R_BRACKET);
                                                                                    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String rvalue_expr2() throws ParseException {
  String s = "";
    if (jj_2_19(6)) {
      s = binary_expr();
    } else if (jj_2_20(6)) {
      s = subscript_expr();
    } else if (jj_2_21(6)) {
      s = if_else_expr();
    } else {

    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String literal() throws ParseException {
  Token token = null;
  System.out.println("literal() called!");
    if (jj_2_22(6)) {
      token = jj_consume_token(STRING_LITERAL);
    } else if (jj_2_23(6)) {
      token = jj_consume_token(NUMERIC_LITERAL);
    } else if (jj_2_24(6)) {
      token = jj_consume_token(LOGICAL_LITERAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
     {if (true) return token.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String tuple_rvalue_expr() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("tuple_rvalue_expr() called!");
    jj_consume_token(L_PAREN);
    s = rvalue_expr();
    label_6:
    while (true) {
      jj_consume_token(COMMA);
                                       result += ", ";
      s_iter = rvalue_expr();
                                                                                  result += s_iter;
      if (jj_2_25(6)) {
        ;
      } else {
        break label_6;
      }
    }
    jj_consume_token(R_PAREN);
   {if (true) return "(" + s + result + ")";}
    throw new Error("Missing return statement in function");
  }

  final public String array_rvalue_expr() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("array_rvalue_expr() called!");
    jj_consume_token(L_BRACKET);
    if (jj_2_27(6)) {
      s = rvalue_expr();
      label_7:
      while (true) {
        if (jj_2_26(6)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(COMMA);
                                        result += ", ";
        s_iter = rvalue_expr();
                                                                                   result += s_iter;
      }
    } else {
      ;
    }
    jj_consume_token(R_BRACKET);
          {if (true) return "[" + s + result + "]";}
    throw new Error("Missing return statement in function");
  }

/*
String rvalue_expr():
{
  Token i ,l, are, tre;
}
{
  < IDENTIFIER > | literal() | array_rvalue_expr() | tuple_rvalue_expr()
}
*/
  final public String builtin_name() throws ParseException {
  Token token = null;
  System.out.println("builtin_name() called!");
    if (jj_2_28(6)) {
      token = jj_consume_token(SHAPE_OF);
    } else if (jj_2_29(6)) {
      token = jj_consume_token(LENGTH_OF);
    } else if (jj_2_30(6)) {
      token = jj_consume_token(RANGE_OF);
    } else if (jj_2_31(6)) {
      token = jj_consume_token(INTEGER);
    } else if (jj_2_32(6)) {
      token = jj_consume_token(SCALAR);
    } else if (jj_2_33(6)) {
      token = jj_consume_token(LOGICAL);
    } else if (jj_2_34(6)) {
      token = jj_consume_token(STRING);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return token.toString();}
    throw new Error("Missing return statement in function");
  }

  final public String builtin_expr() throws ParseException {
  String s1 = "";
  String s2 = "";
  String s3 = "";
  String result = "";
  System.out.println("builtin_expr() called!");
    s1 = builtin_name();
                        if(s1.equals("length_of")) {  s1 = "len";} if(s1.equals("shape_of")) {  s1 = " tf.shape"; }     result += s1;
    jj_consume_token(L_PAREN);
    s2 = rvalue_expr();
                                 result += ("(" + s2 + ")");
    jj_consume_token(R_PAREN);
    if (jj_2_35(6)) {
      jj_consume_token(L_BRACKET);
      s3 = literal();
                                            result += ( "[" + s3 + "]" );
      jj_consume_token(R_BRACKET);
    } else {
      ;
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*
String subscript_expr():
{
  System.out.println("subscript_expr() called!");
}
{
  //rvalue_expr() <L_BRACKET> ( rvalue_expr() | [rvalue_expr()] ":" [rvalue_expr()]) <R_BRACKET>
  literal() subscript_expr2() | paren_expr() subscript_expr2() | array_rvalue_expr() subscript_expr2()
| tuple_rvalue_expr() subscript_expr2() | binary_expr() subscript_expr2()
|  comprehension_expr() subscript_expr2()
| builtin_expr() subscript_expr2() | invocation() subscript_expr2()
} */
  final public String subscript_expr() throws ParseException {
  String s = "";
  String result = "";
  System.out.println("subscript_expr() called!");
    jj_consume_token(L_BRACKET);
    if (jj_2_38(6)) {
      s = rvalue_expr();
                                    {if (true) return "[" + s;}
    } else if (jj_2_39(6)) {
      if (jj_2_36(6)) {
        s = rvalue_expr();
                         result += s;
      } else {
        ;
      }
      jj_consume_token(COLON);
      if (jj_2_37(6)) {
        s = rvalue_expr();
                                                                  result = result + ":" + s;
      } else {
        ;
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(R_BRACKET);
    s = rvalue_expr2();
                                                                                                                                  result = result + "]" + s; {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*
String subscript_expr2():
{
  System.out.println("subscript_expr2() called!");
}
{
  <L_BRACKET> ( rvalue_expr() | [rvalue_expr()] ":" [rvalue_expr()]) <R_BRACKET> subscript_expr2()
}
*/
  final public String comprehension_expr() throws ParseException {
  System.out.println("comprehension_expr() called!");
    jj_consume_token(L_BRACKET);
    jj_consume_token(FOR);
    loop_iter_list();
    if (jj_2_40(6)) {
      jj_consume_token(IF);
      rvalue_expr();
    } else {
      ;
    }
    jj_consume_token(YIELD);
    rvalue_expr();
    jj_consume_token(R_BRACKET);
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String loop_iter_list() throws ParseException {
  System.out.println("loop_iter_list() called!");
    loop_iter();
    label_8:
    while (true) {
      if (jj_2_41(6)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(COMMA);
      loop_iter();
    }
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String loop_iter() throws ParseException {
  System.out.println("loop_iter() called!");
    jj_consume_token(IDENTIFIER);
    jj_consume_token(IN);
    rvalue_expr();
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

/*
String if_else_expr():
{
  System.out.println("if_else_expr() called!");
}
{
  //rvalue_expr() <IF> rvalue_expr() <ELSE> rvalue_expr()
    literal() if_else_expr2() | paren_expr() if_else_expr2() | array_rvalue_expr() if_else_expr2()
| tuple_rvalue_expr() if_else_expr2()
| comprehension_expr() if_else_expr2()
| builtin_expr() if_else_expr2() | invocation() if_else_expr2()
}

String if_else_expr2():
{
  System.out.println("if_else_expr2() called!");
}
{
  <IF> rvalue_expr() <ELSE> rvalue_expr() if_else_expr2()
}
*/
  final public String if_else_expr() throws ParseException {
  String s1 = "";
  String s2 = "";
  String s3 = "";
  System.out.println("if_else_expr() called!");
    jj_consume_token(IF);
    s1 = rvalue_expr();
    jj_consume_token(ELSE);
    s2 = rvalue_expr();
    s3 = rvalue_expr2();
    {if (true) return " if "+s1+" else " + s2 + s3;}
    throw new Error("Missing return statement in function");
  }

/*
String paren_expr():
{
  System.out.println("paren_expr() called!");
}
{
  < L_PAREN > rvalue_expr() <R_PAREN>
}
*/
/*
String binary_expr():
{
  System.out.println("binary_expr() called!");
}
{
  //rvalue_expr() binary_operator() rvalue_expr()
  literal() binary_expr2() | paren_expr() binary_expr2() | array_rvalue_expr() binary_expr2()
| tuple_rvalue_expr() binary_expr2()
| comprehension_expr() binary_expr2()
| builtin_expr() binary_expr2() | invocation() binary_expr2()
}


String binary_expr2():
{
  System.out.println("binary_expr2() called!");
}
{
  binary_operator() rvalue_expr() binary_expr2()
}
*/
  final public String binary_expr() throws ParseException {
  String s1 = "";
  String s2 = "";
  String s3 = "";
  System.out.println("binary_expr() called!");
    s1 = binary_operator();
    s2 = rvalue_expr();
    s3 = rvalue_expr2();
    {if (true) return s1 + s2 + s3;}
    throw new Error("Missing return statement in function");
  }

  final public String unary_expr() throws ParseException {
  String s1 = "";
  String s2 = "";
  System.out.println("unary_expr() called!");
    s1 = unary_operator();
    s2 = rvalue_expr();
    {if (true) return s1 + s2;}
    throw new Error("Missing return statement in function");
  }

  final public String unary_operator() throws ParseException {
  String s = "";
  System.out.println("unary_operator() called!");
    if (jj_2_42(6)) {
      s = unary_arithmetic_operator();
    } else if (jj_2_43(6)) {
      s = unary_logical_operator();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String unary_logical_operator() throws ParseException {
  System.out.println("unary_logical_operator() called!");
    jj_consume_token(NOT);
        {if (true) return "!";}
    throw new Error("Missing return statement in function");
  }

  final public String unary_arithmetic_operator() throws ParseException {
  System.out.println("unary_arithmetic_operator() called!");
    if (jj_2_44(6)) {
      jj_consume_token(PLUS);
        {if (true) return "+";}
    } else if (jj_2_45(6)) {
      jj_consume_token(MINUS);
                              {if (true) return "-";}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String binary_operator() throws ParseException {
  String s = "";
  System.out.println("binary_operator() called!");
    if (jj_2_46(6)) {
      s = comparison_operator();
    } else if (jj_2_47(6)) {
      s = binary_arithmetic_operator();
    } else if (jj_2_48(6)) {
      s = binary_logical_operator();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String binary_logical_operator() throws ParseException {
  System.out.println("binary_logical_operator() called!");
    if (jj_2_49(6)) {
      jj_consume_token(53);
         {if (true) return "&&";}
    } else if (jj_2_50(6)) {
      jj_consume_token(54);
                                 {if (true) return "||";}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String binary_arithmetic_operator() throws ParseException {
  System.out.println("binary_arithmetic_operator() called!");
    if (jj_2_51(6)) {
      jj_consume_token(PLUS);
        {if (true) return "+";}
    } else if (jj_2_52(6)) {
      jj_consume_token(MINUS);
          {if (true) return "-";}
    } else if (jj_2_53(6)) {
      jj_consume_token(MULT);
          {if (true) return "*";}
    } else if (jj_2_54(6)) {
      jj_consume_token(DIV);
          {if (true) return "/";}
    } else if (jj_2_55(6)) {
      jj_consume_token(POW);
          {if (true) return "^";}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String comparison_operator() throws ParseException {
  System.out.println("comparison_operator() called!");
    if (jj_2_56(6)) {
      jj_consume_token(LESS);
        {if (true) return "<";}
    } else if (jj_2_57(6)) {
      jj_consume_token(LESS_EQUAL);
           {if (true) return "<=";}
    } else if (jj_2_58(6)) {
      jj_consume_token(GREATER);
          {if (true) return ">";}
    } else if (jj_2_59(6)) {
      jj_consume_token(GREATER_EQUAL);
           {if (true) return ">=";}
    } else if (jj_2_60(6)) {
      jj_consume_token(EQUAL);
           {if (true) return "==";}
    } else if (jj_2_61(6)) {
      jj_consume_token(NOT_EQUAL);
           {if (true) return "!=";}
    } else if (jj_2_62(6)) {
      jj_consume_token(IN);
           {if (true) return "in";}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String array_type_spec() throws ParseException {
  String result = "";
    if (jj_2_63(6)) {
      result = tuple_type_spec();
                                     ;
    } else if (jj_2_64(6)) {
      result = tensor_type_spec();
                                                                           ;
    } else if (jj_2_65(6)) {
      result = type_name();
                                                                                                          ;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(L_BRACKET);
    jj_consume_token(R_BRACKET);
        {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String tuple_type_spec() throws ParseException {
  String result="";
  String f;
  String s;
    jj_consume_token(L_PAREN);
    f = type_spec();
                                     result += f;
    label_9:
    while (true) {
      jj_consume_token(COMMA);
      s = type_spec();
                                                                                   result += s;
      if (jj_2_66(6)) {
        ;
      } else {
        break label_9;
      }
    }
    jj_consume_token(R_PAREN);
       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String type_name() throws ParseException {
  String result;
    if (jj_2_67(6)) {
      jj_consume_token(TENSOR);
                 result = "tensor";
    } else if (jj_2_68(6)) {
      jj_consume_token(INTEGER);
                  result = "integer";
    } else if (jj_2_69(6)) {
      jj_consume_token(SCALAR);
                 result = "scalar";
    } else if (jj_2_70(6)) {
      jj_consume_token(LOGICAL);
                  result = "logical";
    } else if (jj_2_71(6)) {
      jj_consume_token(STRING);
                 result = "string";
    } else if (jj_2_72(6)) {
      jj_consume_token(QUESTION);
            result = "?";
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String tensor_type_spec() throws ParseException {
  String result = "";
  String type;
    jj_consume_token(TENSOR);
    jj_consume_token(LESS);
    if (jj_2_73(6)) {
      type = type_name();
                                          result = type;
    } else {
      ;
    }
    jj_consume_token(GREATER);
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String assign_type_spec() throws ParseException {
  String result = "";
  String type;
    type = type_name();
                           result += type;
    jj_consume_token(ASSIGN);
    type = rvalue_expr();
                                                                               result += "";
      {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String type_spec() throws ParseException {
  String result;
    if (jj_2_74(6)) {
      result = assign_type_spec();
                                      ;
    } else if (jj_2_75(6)) {
      result = tensor_type_spec();
                                      ;
    } else if (jj_2_76(6)) {
      result = array_type_spec();
                                     ;
    } else if (jj_2_77(6)) {
      result = tuple_type_spec();
                                     ;
    } else if (jj_2_78(6)) {
      result = type_name();
                                ;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

/*
String type_spec():
{
  System.out.println("type_spec() called!");
}
{
  ( < TENSOR > (type_name() | tensor_type_spec()) | array_type_spec() | tuple_type_spec() )
  { return ""; }
}

String tuple_type_spec():
{
  System.out.println("tuple_type_expr() called!");
}
{
  <L_PAREN> type_spec() ("," type_spec())+ <R_PAREN>
  { return ""; }
}

String array_type_spec():
{
  System.out.println("array_type_spec() called!");
}
{
  (
     < TENSOR > ( type_name()| tensor_type_spec() ) array_type_spec2()
  | tuple_type_spec() array_type_spec2() )
  { return ""; }
}

String array_type_spec2():
{
  System.out.println("array_type_spec2() called!");
}
{
  "[]" array_type_spec2()
  { return ""; }
}

String tensor_type_spec():
{
  System.out.println("tensor_type_spec() called!");
}
{
  "<" [type_name()] ">"
  { return ""; }
}

String type_name():
{
  System.out.println("type_name() called!");
}
{
  (
   <INTEGER> | <SCALAR> | <LOGICAL> | <STRING> | "?" )
  { return ""; }
}
*/
  final public String literal_expr() throws ParseException {
  String s = "";
  System.out.println("literal_expr() called!");
    if (jj_2_79(6)) {
      s = literal();
    } else if (jj_2_80(6)) {
      s = array_literal_expr();
    } else if (jj_2_81(6)) {
      s = tuple_literal_expr();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  final public String tuple_literal_expr() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("tuple_literal_expr() called!");
    jj_consume_token(L_PAREN);
    s = literal_expr();
    label_10:
    while (true) {
      jj_consume_token(COMMA);
                                      result += ", ";
      s_iter = literal_expr();
                                                                                  result += s_iter;
      if (jj_2_82(6)) {
        ;
      } else {
        break label_10;
      }
    }
    jj_consume_token(R_PAREN);
    {if (true) return "(" + s + result + ")";}
    throw new Error("Missing return statement in function");
  }

  final public String array_literal_expr() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("array_literal_expr() called!");
    jj_consume_token(L_BRACKET);
    if (jj_2_84(6)) {
      s = literal_expr();
      label_11:
      while (true) {
        if (jj_2_83(6)) {
          ;
        } else {
          break label_11;
        }
        jj_consume_token(COMMA);
                                         result += ", ";
        s_iter = literal_expr();
                                                                                     result += s_iter;
      }
    } else {
      ;
    }
    jj_consume_token(R_BRACKET);
    {if (true) return "[" + s + result + "]";}
    throw new Error("Missing return statement in function");
  }

  final public String result() throws ParseException {
    System.out.println("result() called!");
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type_spec();
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String result_list() throws ParseException {
    System.out.println("result_list() called!");
    result();
    label_12:
    while (true) {
      if (jj_2_85(6)) {
        ;
      } else {
        break label_12;
      }
      jj_consume_token(COMMA);
      result();
    }
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String parameter() throws ParseException {
  Token token = null;
  String s = "";
  String result = "";
    System.out.println("parameter() called!");
    token = jj_consume_token(IDENTIFIER);
                           result += token.toString();
    jj_consume_token(COLON);
    type_spec();
    if (jj_2_86(6)) {
      jj_consume_token(ASSIGN);
      s = literal_expr();
    } else {
      ;
    }
                                                                                                    result = result; {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String parameter_list() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("parameter_list() called!");
    s = parameter();
    label_13:
    while (true) {
      if (jj_2_87(6)) {
        ;
      } else {
        break label_13;
      }
      jj_consume_token(COMMA);
                         result += ", ";
      s_iter = parameter();
                                                                  result += s_iter;
    }
    {if (true) return s + result;}
    throw new Error("Missing return statement in function");
  }

  final public String generic_declaration() throws ParseException {
        System.out.println("generic_declaration() called!");
    jj_consume_token(LESS);
    jj_consume_token(QUESTION);
    if (jj_2_88(6)) {
      jj_consume_token(ASSIGN);
      type_name();
    } else {
      ;
    }
    jj_consume_token(GREATER);
    {if (true) return "";}
    throw new Error("Missing return statement in function");
  }

  final public String fragment_declaration() throws ParseException {
  String result = "";
  String s = "";
  Token token = null;
    System.out.println("fragment_declaration() called!");
    jj_consume_token(FRAGMENT);
    token = jj_consume_token(IDENTIFIER);
                                      result += token.toString();
    if (jj_2_89(6)) {
      generic_declaration();
    } else {
      ;
    }
    jj_consume_token(L_PAREN);
    s = parameter_list();
    jj_consume_token(R_PAREN);
                                                                      result = result + "(" + s;
    jj_consume_token(ARROW);
    jj_consume_token(L_PAREN);
    result_list();
    jj_consume_token(R_PAREN);
                                            {if (true) return result + "):\u005cn\u005cn";}
    throw new Error("Missing return statement in function");
  }

  final public String fragment_definition() throws ParseException {
  String result = "";
  String s = "";
    System.out.println("fragment_definition() called!");
    result += "def ";
    s = fragment_declaration();
                               result += s;
    s = body();
                                                           result += s; {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String lvalue_expr() throws ParseException {
  Token token = null;
  String s = "";
  String result = "";
    System.out.println("lvalue_expr() called!");
    if (jj_2_90(6)) {
      token = jj_consume_token(IDENTIFIER);
                             result += token.toString();
      s = tuple_lvalue_expr();
                                                                                     result += s;
    } else if (jj_2_91(6)) {
      s = array_lvalue_expr();
                              result += s;
      s = tuple_lvalue_expr();
                                                                       result += s;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
       {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String tuple_lvalue_expr() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("tuple_lvalue_expr() called!");
    if (jj_2_95(6)) {
      jj_consume_token(L_PAREN);
      s = lvalue_expr();
      label_14:
      while (true) {
        jj_consume_token(COMMA);
        s_iter = lvalue_expr();
                                                            result = result + ", " + s_iter;
        if (jj_2_92(6)) {
          ;
        } else {
          break label_14;
        }
      }
      jj_consume_token(R_PAREN);
               {if (true) return "(" + s + result + ")";}
    } else {
      if (jj_2_94(6)) {
        label_15:
        while (true) {
          jj_consume_token(COMMA);
          s_iter = lvalue_expr();
                                                                                 result += s_iter;
          if (jj_2_93(6)) {
            ;
          } else {
            break label_15;
          }
        }
        s = tuple_lvalue_expr();
                                                                                                                                 result += s;
      } else {

      }
    {if (true) return result;}
    }
    throw new Error("Missing return statement in function");
  }

  final public String array_lvalue_expr() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("array_lvalue_expr() called!");
    jj_consume_token(L_BRACKET);
    if (jj_2_97(6)) {
      s = lvalue_expr();
      label_16:
      while (true) {
        if (jj_2_96(6)) {
          ;
        } else {
          break label_16;
        }
        jj_consume_token(COMMA);
        s_iter = lvalue_expr();
                                                               result = result + ", " + s_iter;
      }
    } else {
      ;
    }
    jj_consume_token(R_BRACKET);
    {if (true) return s + result;}
    throw new Error("Missing return statement in function");
  }

  final public String argument() throws ParseException {
  Token token = null;
  String s = "";
    System.out.println("argument() called!");
    if (jj_2_98(6)) {
      token = jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      s = rvalue_expr();
                                                 {if (true) return token.toString() + "=" + s;}
    } else if (jj_2_99(6)) {
      s = rvalue_expr();
                        {if (true) return s;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String argument_list() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("argument_list() called!");
    s = argument();
    label_17:
    while (true) {
      if (jj_2_100(6)) {
        ;
      } else {
        break label_17;
      }
      jj_consume_token(COMMA);
                        result += ", ";
      s_iter = argument();
                                                                result += s_iter;
    }
    {if (true) return s + result;}
    throw new Error("Missing return statement in function");
  }

/*
String invocation():
{
    System.out.println("invocation() called!");
}
{
  < IDENTIFIER > < L_PAREN > argument_list() <R_PAREN>
}
*/
/*
String assignment():
{
  Token l, i;
}
{
  lvalue_expr() "=" invocation() ";"
}
*/
  final public String body() throws ParseException {
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("body() called!");
    jj_consume_token(L_BRACE);
    label_18:
    while (true) {
      s_iter = assignment();
                                      result += s_iter;
      if (jj_2_101(6)) {
        ;
      } else {
        break label_18;
      }
    }
                                                              s = s_iter.split(" ")[0];
    jj_consume_token(R_BRACE);
                                                                                                      result += "\u005cnreturn " + s;  {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String identifier_list() throws ParseException {
  Token token = null;
  Token token_iter = null;
  String result = "";
    System.out.println("identifier_list() called!");
    token = jj_consume_token(IDENTIFIER);
    label_19:
    while (true) {
      if (jj_2_102(6)) {
        ;
      } else {
        break label_19;
      }
      jj_consume_token(COMMA);
                                result += ", ";
      token_iter = jj_consume_token(IDENTIFIER);
                                                                                result += token_iter.toString();
    }
    {if (true) return token.toString() + result;}
    throw new Error("Missing return statement in function");
  }

  final public String graph_declaration() throws ParseException {
  Token token = null;
  String s = "";
  String result = "";
    System.out.println("graph_declaration() called!");
    jj_consume_token(GRAPH);
    token = jj_consume_token(IDENTIFIER);
    jj_consume_token(L_PAREN);
    s = identifier_list();
    jj_consume_token(R_PAREN);
    jj_consume_token(ARROW);
    jj_consume_token(L_PAREN);
    identifier_list();
    jj_consume_token(R_PAREN);
    {if (true) return token.toString() + "(" + s + "):";}
    throw new Error("Missing return statement in function");
  }

  final public String graph_definition() throws ParseException {
  String result = "";
  String s = "";
  String[] tmp;
  int i = 0;
    System.out.println("graph_definition() called!");
    graph_declaration();
    s = body();
    result += s;
    tmp = result.split("\u005cn");
    i = tmp.length -1;
    result = "";
    for(int j=0;j<tmp.length-1;j++)
        result += (tmp[j]+"\u005cn");
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String one_line() throws ParseException {
        String res = "";
    if (jj_2_103(6)) {
      res = graph_definition();
                                        ;
    } else if (jj_2_104(6)) {
      res = fragment_definition();
                                                                              ;
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
            {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_3_64() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(TENSOR)) return true;
    if (jj_scan_token(LESS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) jj_scanpos = xsp;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) jj_scanpos = xsp;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(QUESTION)) return true;
    return false;
  }

  private boolean jj_3_71() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(LOGICAL)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    return false;
  }

  private boolean jj_3_69() {
    if (jj_scan_token(SCALAR)) return true;
    return false;
  }

  private boolean jj_3_68() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(TENSOR)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3_15()) return true;
    }
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) {
    jj_scanpos = xsp;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_32()) return true;
    Token xsp;
    if (jj_3_13()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    if (jj_3_66()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_66()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_32()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) {
    jj_scanpos = xsp;
    if (jj_3_65()) return true;
    }
    }
    if (jj_scan_token(L_BRACKET)) return true;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_scan_token(IN)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(L_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(NOT_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(GREATER_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3_50() {
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_scan_token(LESS_EQUAL)) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) {
    jj_scanpos = xsp;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_67()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_scan_token(MULT)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) {
    jj_scanpos = xsp;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(GRAPH)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_74()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    if (jj_scan_token(ARROW)) return true;
    return false;
  }

  private boolean jj_3_45() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) {
    jj_scanpos = xsp;
    if (jj_3_45()) return true;
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    return false;
  }

  private boolean jj_3_94() {
    Token xsp;
    if (jj_3_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_93()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    }
    return false;
  }

  private boolean jj_3_96() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_65()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_100()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    }
    return false;
  }

  private boolean jj_3_92() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_69()) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_58()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_96()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) return true;
    }
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) jj_scanpos = xsp;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_28()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_27()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_26()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_25()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_24()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3_9()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_58()) return true;
    Token xsp;
    if (jj_3_92()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_92()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_95()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) return true;
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_57()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_32()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) return true;
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_3R_58()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_scan_token(FRAGMENT)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_89()) jj_scanpos = xsp;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(LESS)) return true;
    if (jj_scan_token(QUESTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_88()) jj_scanpos = xsp;
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(EXTENSION)) return true;
    Token xsp;
    if (jj_3_1()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMI_COLON)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_47()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) return true;
    }
    if (jj_scan_token(R_BRACKET)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_83()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_scan_token(L_BRACKET)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(L_BRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_84()) jj_scanpos = xsp;
    if (jj_scan_token(R_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_80() {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_66()) return true;
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_32()) return true;
    if (jj_scan_token(R_PAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(L_PAREN)) return true;
    if (jj_3R_52()) return true;
    Token xsp;
    if (jj_3_82()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(R_PAREN)) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_scan_token(LOGICAL)) return true;
    return false;
  }

  private boolean jj_3_32() {
    if (jj_scan_token(SCALAR)) return true;
    return false;
  }

  private boolean jj_3_31() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_scan_token(RANGE_OF)) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_scan_token(LENGTH_OF)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_scan_token(SHAPE_OF)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) {
    jj_scanpos = xsp;
    if (jj_3_81()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_66() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_32()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_64() {
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_24() {
    if (jj_scan_token(LOGICAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_scan_token(NUMERIC_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_65() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) {
    jj_scanpos = xsp;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_46()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_18()) jj_scanpos = xsp;
    if (jj_scan_token(YIELD)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public MyNewGrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[104];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyNewGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyNewGrammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyNewGrammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyNewGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyNewGrammar(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyNewGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[55];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 55; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 104; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
