/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package javacccc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int NUMERIC_LITERAL = 5;
  /** RegularExpression Id. */
  int STRING_LITERAL = 6;
  /** RegularExpression Id. */
  int ARROW = 7;
  /** RegularExpression Id. */
  int LOGICAL_LITERAL = 8;
  /** RegularExpression Id. */
  int LESS = 9;
  /** RegularExpression Id. */
  int LESS_EQUAL = 10;
  /** RegularExpression Id. */
  int GREATER = 11;
  /** RegularExpression Id. */
  int GREATER_EQUAL = 12;
  /** RegularExpression Id. */
  int EQUAL = 13;
  /** RegularExpression Id. */
  int NOT_EQUAL = 14;
  /** RegularExpression Id. */
  int PLUS = 15;
  /** RegularExpression Id. */
  int MINUS = 16;
  /** RegularExpression Id. */
  int MULT = 17;
  /** RegularExpression Id. */
  int DIV = 18;
  /** RegularExpression Id. */
  int POW = 19;
  /** RegularExpression Id. */
  int AND = 20;
  /** RegularExpression Id. */
  int OR = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int ASSIGN = 23;
  /** RegularExpression Id. */
  int COMMA = 24;
  /** RegularExpression Id. */
  int L_PAREN = 25;
  /** RegularExpression Id. */
  int R_PAREN = 26;
  /** RegularExpression Id. */
  int L_BRACKET = 27;
  /** RegularExpression Id. */
  int R_BRACKET = 28;
  /** RegularExpression Id. */
  int L_BRACE = 29;
  /** RegularExpression Id. */
  int R_BRACE = 30;
  /** RegularExpression Id. */
  int COLON = 31;
  /** RegularExpression Id. */
  int SEMI_COLON = 32;
  /** RegularExpression Id. */
  int QUESTION = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int IF = 35;
  /** RegularExpression Id. */
  int IN = 36;
  /** RegularExpression Id. */
  int FOR = 37;
  /** RegularExpression Id. */
  int ELSE = 38;
  /** RegularExpression Id. */
  int YIELD = 39;
  /** RegularExpression Id. */
  int GRAPH = 40;
  /** RegularExpression Id. */
  int STRING = 41;
  /** RegularExpression Id. */
  int TENSOR = 42;
  /** RegularExpression Id. */
  int SCALAR = 43;
  /** RegularExpression Id. */
  int LOGICAL = 44;
  /** RegularExpression Id. */
  int VERSION = 45;
  /** RegularExpression Id. */
  int INTEGER = 46;
  /** RegularExpression Id. */
  int SHAPE_OF = 47;
  /** RegularExpression Id. */
  int LENGTH_OF = 48;
  /** RegularExpression Id. */
  int RANGE_OF = 49;
  /** RegularExpression Id. */
  int FRAGMENT = 50;
  /** RegularExpression Id. */
  int EXTENSION = 51;
  /** RegularExpression Id. */
  int IDENTIFIER = 52;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\\n\"",
    "\"\\t\"",
    "\"\\n\"",
    "<NUMERIC_LITERAL>",
    "<STRING_LITERAL>",
    "\"->\"",
    "<LOGICAL_LITERAL>",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"=\"",
    "\",\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\":\"",
    "\";\"",
    "\"?\"",
    "\".\"",
    "\"if\"",
    "\"in\"",
    "\"for\"",
    "\"else\"",
    "\"yield\"",
    "\"graph\"",
    "\"string\"",
    "\"tensor\"",
    "\"scalar\"",
    "\"logical\"",
    "\"version\"",
    "\"integer\"",
    "\"shape_of\"",
    "\"length_of\"",
    "\"range_of\"",
    "\"fragment\"",
    "\"extension\"",
    "<IDENTIFIER>",
    "\"&&\"",
    "\"||\"",
  };

}
