

options
{
	static=false;
	LOOKAHEAD=6;
	DEBUG_PARSER=false;
}

PARSER_BEGIN(MyNewGrammar)

package javacccc;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.BufferedReader;
import java.io.FileReader;

public class MyNewGrammar
{
	public static void main(String[] args) throws ParseException, IOException
	{
		MyNewGrammar parser = new MyNewGrammar(System.in);

		FileOutputStream output1 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_conv_layer.txt");
		FileOutputStream output2 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_avg_pool_layer.txt");
		FileOutputStream output3 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_deconv_layer.txt");
		FileOutputStream output4 = new FileOutputStream(System.getProperty("user.dir")+"/fragment_simple_recurrent_network.txt");
		FileOutputStream output5 = new FileOutputStream(System.getProperty("user.dir")+"/graph_resnet.txt");
		FileOutputStream output6 = new FileOutputStream(System.getProperty("user.dir")+"/graph_google_net.txt");

		System.out.println("<< input fragment_conv_layer >>");
		String res = parser.one_line();
		String[] arr = res.split("\n");
		System.out.println("******************************************");
		System.out.println(res);
		for(int i=0;i<arr.length;i++)
			output1.write((arr[i] + "\r\n").getBytes());
		
		System.out.println("parser start!");
		System.out.println("<< input fragment_avg_pool_layer >>");
		res = parser.one_line();
		arr = res.split("\n");
		System.out.println("******************************************");
		System.out.println(res);
		for(int i=0;i<arr.length;i++)
			output2.write((arr[i] + "\r\n").getBytes());
			
		System.out.println("<< input fragment_deconv_layer >>");
		res = parser.one_line();
		arr = res.split("\n");
		System.out.println("******************************************");
		System.out.println(res);
		for(int i=0;i<arr.length;i++)
			output3.write((arr[i] + "\r\n").getBytes());
			
		System.out.println("<< input fragment_simple_recurrent_network >>");
		res = parser.one_line();
		arr = res.split("\n");
		System.out.println("******************************************");
		System.out.println(res);
		for(int i=0;i<arr.length;i++)
			output4.write((arr[i] + "\r\n").getBytes());
			
		System.out.println("<< input graph_ResNet >>");
		res = parser.one_line();
		arr = res.split("\n");
		System.out.println("******************************************");
		System.out.println(res);
		for(int i=0;i<arr.length;i++)
			output5.write((arr[i] + "\r\n").getBytes());
			
		System.out.println("<< input graph_GoogleNet >>");
		res = parser.one_line();
		arr = res.split("\n");
		System.out.println("******************************************");
		System.out.println(res);
		for(int i=0;i<arr.length;i++)
			output6.write((arr[i] + "\r\n").getBytes());
			
		
	}
}

PARSER_END(MyNewGrammar)

SKIP:
{
	" "
|	"\r\n"
|	"\t"
| 	"\n"
 
}
 
TOKEN:
{ 
  < NUMERIC_LITERAL:(["+","-"])?(["0"-"9"])+("."(["0"-"9"])+)?(["E","e"](["+","-"])?(["0"-"9"])+)? >
| < STRING_LITERAL:("'" | "\"")(["a"-"z","A"-"Z","/","_","0"-"9","[","]"])*("'"|"\"") >
| < ARROW:"->" >
| < LOGICAL_LITERAL:("true"|"false") >
| < LESS:"<" >
| < LESS_EQUAL:"<=" >
| < GREATER:">" >
| < GREATER_EQUAL:">=" >
| < EQUAL:"==" >
| < NOT_EQUAL:"!=" >
| < PLUS:"+" >
| < MINUS:"-" >
| < MULT:"*" >
| < DIV:"/" >
| < POW:"^" >
| < AND:"&" >
| < OR:"|" >
| < NOT:"!" >
| < ASSIGN:"=" >
| < COMMA:"," >
| < L_PAREN:"(" >
| < R_PAREN:")" >
| < L_BRACKET:"[" >
| < R_BRACKET:"]" >
| < L_BRACE:"{" >
| < R_BRACE:"}" >
| < COLON:":" >
| < SEMI_COLON:";" >
| < QUESTION:"?" >
| < DOT:"." >
| < IF:"if" >
| < IN:"in" >
| < FOR:"for" >
| < ELSE:"else" >
| < YIELD:"yield" >
| < GRAPH:"graph" >
| < STRING:"string" >
| < TENSOR:"tensor" >
| < SCALAR:"scalar" >
| < LOGICAL:"logical" >
| < VERSION:"version" >
| < INTEGER:"integer" >
| < SHAPE_OF:"shape_of" >
| < LENGTH_OF:"length_of" >
| < RANGE_OF:"range_of" >
| < FRAGMENT:"fragment" >
| < EXTENSION:"extension" >
| < IDENTIFIER:(["_", "a"-"z", "A"-"Z"])+(["a"-"z","A"-"Z","0"-"9","_"])* >


}





String extension():
{
  String result = "";
  Token token = null;
  Token token_iter = null;
  System.out.println("extension() called!");
}
{
  token = <EXTENSION> ( token_iter = < IDENTIFIER > { result += token_iter.toString(); } )+  ";" {
    return token.toString() + " " + result; }
}

String version():
{
  String result = "";
  Token token = null;
  Token token_iter = null;
  System.out.println("version() called!");
}
{
  token = <VERSION> (token_iter = < NUMERIC_LITERAL > { result += token_iter.toString(); }) ";"
  { return token.toString() + result; }
}

String document():
{
  String s = "";
  String result = "";
  String s_iter = "";
  System.out.println("document() called!");
}
{
  s = version() { result += s; } (s_iter = extension() { result += s_iter; })* (s_iter = fragment_definition() { result += s_iter; })* s = graph_definition() { result += s; }
  { return result; }
}


//  lval rval************************************************
String assignment():
{
  String result = "";
  String s = "";
  String i = "";
  System.out.println("assignment() called!");
}
{
  s = lvalue_expr() { result += s; }  "=" { result += " = "; }
    s = rvalue_expr()";"
    { result = result + s + i; return result + ";\n"; }
}
 
/*
String rvalue_expr():
{
  System.out.println("rvalue_expr() called!");
}
{
    invocation() | paren_expr() | literal() | array_rvalue_expr() | binary_expr()| unary_expr()
  					 | tuple_rvalue_expr()
  					 | subscript_expr() | if_else_expr() | comprehension_expr()
  					 | builtin_expr()
}
*/

String rvalue_expr():
{
  String s = "";
  String result = "";
}
{
  (	s = identifier_invocation() { result += s; } s = rvalue_expr2() { result += s; return result; }
  | s = paren_tuple() { result += s; } s = rvalue_expr2() { result += s; return result; }
  | s = array_comprehension() { result += s; } s = rvalue_expr2() { result += s; return result; }
  | s = literal() { result += s; } s = rvalue_expr2() { result += s; return result; }
  | s = unary_expr() { result += s; } s = rvalue_expr2() { result += s; return result; }
  | s = builtin_expr() { result += s; } s = rvalue_expr2() { result += s; return result; }
  )
  { return result; }
  
//     invocation() rvalue_expr2()
//  < IDENTIFIER > ( { } | invocation2()) rvalue_expr2()  
//  | paren_expr() rvalue_expr2()
//  | tuple_rvalue_expr() rvalue_expr2()
//  | array_rvalue_expr() rvalue_expr2()
//  | comprehension_expr() rvalue_expr2()
}

String identifier_invocation():
{
  Token id = null;
  String Result = "";
  String name = "";
  String s = "";
}
{
  id = < IDENTIFIER >
  {     
      name = id.toString();
    switch(name){
      case "variable":
        Result += " tf.Variable";
        break;
      case "avg_pool":
      Result += " tf.nn.avg_pool";
        break;
      case "constant":
      Result += " tf.constant";
        break;
      case "conv":
      Result += " tf.layers.conv2d";
        break;
      case "deconv":
      Result += " tf.layers.conv2d_transpose";
        break;
      case "concat":
      Result += " tf.concat";
        break;
      case "tanh":
      Result += " tf.tanh";
        break;
      case "sigmoid":
            Result += " tf.sigmoid";
        break;
      case "relu":
      Result += " tf.nn.relu";
        break;
      case "conv_layer":
      Result += " tf.nn.conv2d";
        break;
      case "max_pool_layer":
            Result += " tf.nn.max_pool";
        break;
      case "max_pool":
      Result += " tf.nn.max_pool";
      break;
      case "reshape":
      Result += " tf.reshape";
        break;
      case "matmul":
      Result += " tf.matmul";
        break;
      case "local_response_normalization":
        Result += " tf.nn.local_response_normalization";
        break;
      case "dropout":
      Result += " tf.nn.dropout";
        break;
      case "add":
      Result += " tf.add";
        break;
      case "softmax":
      Result += " tf.nn.softmax";
        break;
      default:
        Result += " " + name;
        break;
    }
  } 
   ( s = invocation2() { Result += s; } | { } )
  { return Result; }
}

String invocation2():
{
  String s = "";
    System.out.println("invocation() called!");
}
{
  < L_PAREN >  s = argument_list() <R_PAREN> { return "(" + s + ")"; }
}

String paren_tuple():
{
  String s = "";
  String result = "";
}
{
  < L_PAREN > ( s = paren_expr2() { result += s; }
  | s = tuple_rvalue_expr2() { result += s; }) { return "(" + result + ")"; }
}

String paren_expr2():
{
  String s = "";
  System.out.println("paren_expr() called!");
}
{
  s = rvalue_expr() <R_PAREN> { return s; }
}

String tuple_rvalue_expr2():
{
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("tuple_rvalue_expr() called!");
}
{
  s = rvalue_expr() ("," { result += ", "; } s_iter = rvalue_expr() { result += s_iter; })+ <R_PAREN>
  { return s + result; }
}

String array_comprehension():
{
  String s = "";
}
{
  < L_BRACKET > ( s = array_rvalue_expr2() | s = comprehension_expr2() )
  { return "[" + s + "]"; }
}

String array_rvalue_expr2():
{
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("array_rvalue_expr() called!");
}
{
  [s= rvalue_expr() ("," s_iter = rvalue_expr() { result = result + ", " + s_iter; })* ] <R_BRACKET>
  { return s + result; }
}

//----------------------------
String comprehension_expr2():
{
  String result = "";
  System.out.println("comprehension_expr() called!");
}
{
  <FOR> loop_iter_list() [ <IF> rvalue_expr() ] <YIELD> rvalue_expr() <R_BRACKET> { return result; }
}

String rvalue_expr2():
{
  String s = "";
}
{
  (s = binary_expr() | s = subscript_expr() | s = if_else_expr() | { })
  { return s; }
}




















String literal():
{
  Token token = null;
  System.out.println("literal() called!");
}
{
   ( token = < STRING_LITERAL >
   | token = < NUMERIC_LITERAL >
   | token = < LOGICAL_LITERAL > )
   { 
     return token.toString(); }
}

String tuple_rvalue_expr():
{
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("tuple_rvalue_expr() called!");
}
{
  < L_PAREN > s = rvalue_expr() ("," { result += ", "; } s_iter = rvalue_expr() { result += s_iter; })+ <R_PAREN>
  {return "(" + s + result + ")"; }
}

String array_rvalue_expr():
{
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("array_rvalue_expr() called!");
}
{
  <L_BRACKET> [s = rvalue_expr() ("," { result += ", "; } s_iter = rvalue_expr() { result += s_iter; })* ] <R_BRACKET>
	{ return "[" + s + result + "]"; }
}



/*
String rvalue_expr():
{
  Token i ,l, are, tre;
}
{
  < IDENTIFIER > | literal() | array_rvalue_expr() | tuple_rvalue_expr()
}
*/
 
String builtin_name():
{
  Token token = null;
  System.out.println("builtin_name() called!");
}
{
  (
    token = <SHAPE_OF>
  | token = <LENGTH_OF>
  | token = <RANGE_OF>
  | token = <INTEGER>
  | token = <SCALAR>
  | token = <LOGICAL>
  | token = <STRING>   )
  { return token.toString(); }
}

String builtin_expr():
{
  String s1 = "";
  String s2 = "";
  String s3 = "";
  String result = "";
  System.out.println("builtin_expr() called!");
}
{
  s1 = builtin_name() { if(s1.equals("length_of")) {  s1 = "len";} if(s1.equals("shape_of")) {  s1 = " tf.shape"; }	result += s1; }
  <L_PAREN> s2 = rvalue_expr() { result += ("(" + s2 + ")"); }
   <R_PAREN> [<L_BRACKET > s3 = literal() { result += ( "[" + s3 + "]" ); } < R_BRACKET >]
  { return result; }
}

/*
String subscript_expr():
{
  System.out.println("subscript_expr() called!");
}
{
  //rvalue_expr() <L_BRACKET> ( rvalue_expr() | [rvalue_expr()] ":" [rvalue_expr()]) <R_BRACKET>
  literal() subscript_expr2() | paren_expr() subscript_expr2() | array_rvalue_expr() subscript_expr2()
| tuple_rvalue_expr() subscript_expr2() | binary_expr() subscript_expr2()
|  comprehension_expr() subscript_expr2()
| builtin_expr() subscript_expr2() | invocation() subscript_expr2()
} */

String subscript_expr():
{
  String s = "";
  String result = "";
  System.out.println("subscript_expr() called!");
}
{
  <L_BRACKET> ( s = rvalue_expr() { return "[" + s; }
  | [s = rvalue_expr() { result += s; }] ":" [s = rvalue_expr() { result = result + ":" + s; }]) <R_BRACKET> s = rvalue_expr2() { result = result + "]" + s; return result; }
}


/*
String subscript_expr2():
{
  System.out.println("subscript_expr2() called!");
}
{
  <L_BRACKET> ( rvalue_expr() | [rvalue_expr()] ":" [rvalue_expr()]) <R_BRACKET> subscript_expr2()
}
*/
String comprehension_expr():
{
  System.out.println("comprehension_expr() called!");
}
{
  <L_BRACKET> <FOR> loop_iter_list() [ <IF> rvalue_expr() ] <YIELD> rvalue_expr() <R_BRACKET>
  { return ""; }
}

String loop_iter_list():
{
  System.out.println("loop_iter_list() called!");
}
{
  loop_iter() ("," loop_iter())*
  { return ""; }
}

String loop_iter():
{
  System.out.println("loop_iter() called!");
}
{
  < IDENTIFIER > <IN> rvalue_expr()
  { return ""; }
}
/*
String if_else_expr():
{
  System.out.println("if_else_expr() called!");
}
{
  //rvalue_expr() <IF> rvalue_expr() <ELSE> rvalue_expr()
    literal() if_else_expr2() | paren_expr() if_else_expr2() | array_rvalue_expr() if_else_expr2()
| tuple_rvalue_expr() if_else_expr2()
| comprehension_expr() if_else_expr2()
| builtin_expr() if_else_expr2() | invocation() if_else_expr2()
}

String if_else_expr2():
{
  System.out.println("if_else_expr2() called!");
}
{
  <IF> rvalue_expr() <ELSE> rvalue_expr() if_else_expr2()
}
*/

String if_else_expr():
{
  String s1 = "";
  String s2 = "";
  String s3 = "";
  System.out.println("if_else_expr() called!");
}
{
  ( <IF> s1 = rvalue_expr() <ELSE> s2 = rvalue_expr() s3 = rvalue_expr2())
  { return " if "+s1+" else " + s2 + s3; }
}


/*
String paren_expr():
{
  System.out.println("paren_expr() called!");
}
{
  < L_PAREN > rvalue_expr() <R_PAREN>
}
*/
/*
String binary_expr():
{
  System.out.println("binary_expr() called!");
}
{
  //rvalue_expr() binary_operator() rvalue_expr()
  literal() binary_expr2() | paren_expr() binary_expr2() | array_rvalue_expr() binary_expr2()
| tuple_rvalue_expr() binary_expr2()
| comprehension_expr() binary_expr2()
| builtin_expr() binary_expr2() | invocation() binary_expr2()
}


String binary_expr2():
{
  System.out.println("binary_expr2() called!");
}
{
  binary_operator() rvalue_expr() binary_expr2()
}
*/
String binary_expr():
{
  String s1 = "";
  String s2 = "";
  String s3 = "";
  System.out.println("binary_expr() called!");
}
{
  (s1 = binary_operator() s2 = rvalue_expr() s3 = rvalue_expr2())
  { return s1 + s2 + s3; }
  
}

String unary_expr():
{
  String s1 = "";
  String s2 = "";
  System.out.println("unary_expr() called!");
}
{
  s1 = unary_operator() s2 = rvalue_expr()
  { return s1 + s2; }
}

String unary_operator():
{
  String s = "";
  System.out.println("unary_operator() called!");
}
{
  (s = unary_arithmetic_operator() | s = unary_logical_operator())
  { return s; }
}

String unary_logical_operator():
{
  System.out.println("unary_logical_operator() called!");
}
{
  "!" { return "!"; }
}

String unary_arithmetic_operator():
{
  System.out.println("unary_arithmetic_operator() called!");
}
{
  "+" { return "+"; } | "-" { return "-"; }
}

String binary_operator():
{
  String s = "";
  System.out.println("binary_operator() called!");
}
{
  (s = comparison_operator() | s = binary_arithmetic_operator() | s = binary_logical_operator())
  { return s; }
}

String binary_logical_operator():
{
  System.out.println("binary_logical_operator() called!");
}
{
  "&&" { return "&&"; } | "||" { return "||"; }
}

String binary_arithmetic_operator():
{
  System.out.println("binary_arithmetic_operator() called!");
}
{
  "+" { return "+"; }
  | "-" { return "-"; }
  | "*" { return "*"; }
  | "/" { return "/"; }
  | "^" { return "^"; }
}

String comparison_operator():
{
  System.out.println("comparison_operator() called!");
}
{
  "<" { return "<"; }
  | "<=" { return "<="; }
  | ">" { return ">"; }
  | ">=" { return ">="; }
  | "==" { return "=="; }
  | "!=" { return "!="; }
  | <IN> { return "in"; }
}
String array_type_spec():
{
  String result = "";
}
{
   (
     ((result = tuple_type_spec()) { ; } | (result = tensor_type_spec()) { ; } | (result = type_name()) { ; }) < L_BRACKET > < R_BRACKET >
   ) {  return ""; }
}

String tuple_type_spec():
{
  String result="";
  String f;
  String s;
}
{
   (
     < L_PAREN > (f = type_spec()) { result += f; } ( < COMMA > (s = type_spec()) {result += s;} )+ < R_PAREN >
   ) { return result; }
}

String type_name():
{
  String result;
}
{
  (
    ("tensor") { result = "tensor"; }
  | ("integer") { result = "integer"; }
  | ("scalar") { result = "scalar"; }
  | ("logical") { result = "logical"; }
  | ("string") { result = "string"; }
  | ("?") { result = "?"; }     
  ) { return result; }
}

String tensor_type_spec():
{
  String result = "";
  String type;
}
{
  (
    "tensor" "<" [ (type = type_name()) { result = type; } ] ">"
  ) { return result; }
}

String assign_type_spec():
{
  String result = "";
  String type;
}
{
  (
    (type = type_name()) { result += type; } <ASSIGN> (type = rvalue_expr()) { result += ""; } 
  ) { return ""; }
}

String type_spec():
{
  String result;
}
{
  (
    ( result = assign_type_spec() ) { ; }      
  | ( result = tensor_type_spec() ) { ; } 
  | ( result = array_type_spec() ) { ; }
  | ( result = tuple_type_spec() ) { ; }
  | ( result =  type_name() ) { ; }    
  ) { return result; } 
}



/*
String type_spec():
{
  System.out.println("type_spec() called!");
}
{
  ( < TENSOR > (type_name() | tensor_type_spec()) | array_type_spec() | tuple_type_spec() )
  { return ""; }
}

String tuple_type_spec():
{
  System.out.println("tuple_type_expr() called!");
}
{
  <L_PAREN> type_spec() ("," type_spec())+ <R_PAREN>
  { return ""; }
}

String array_type_spec():
{
  System.out.println("array_type_spec() called!");
}
{
  (
     < TENSOR > ( type_name()| tensor_type_spec() ) array_type_spec2()
  | tuple_type_spec() array_type_spec2() )
  { return ""; }
}

String array_type_spec2():
{
  System.out.println("array_type_spec2() called!");
}
{
  "[]" array_type_spec2()
  { return ""; }
}

String tensor_type_spec():
{
  System.out.println("tensor_type_spec() called!");
}
{
  "<" [type_name()] ">"
  { return ""; }
}

String type_name():
{
  System.out.println("type_name() called!");
}
{
  (
   <INTEGER> | <SCALAR> | <LOGICAL> | <STRING> | "?" )
  { return ""; }
}
*/
String literal_expr():
{
  String s = "";
  System.out.println("literal_expr() called!");
}
{
   (
     s = literal() | s = array_literal_expr() | s = tuple_literal_expr() )
     { return s; }
}

String tuple_literal_expr():
{
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("tuple_literal_expr() called!");
}
{
  <L_PAREN> s = literal_expr() ("," { result += ", "; } s_iter = literal_expr() { result += s_iter; })+ <R_PAREN>
  { return "(" + s + result + ")"; }
}

String array_literal_expr():
{
  String s = "";
  String s_iter = "";
  String result = "";
  System.out.println("array_literal_expr() called!");
}
{
  <L_BRACKET> [s = literal_expr() ("," { result += ", "; } s_iter = literal_expr() { result += s_iter; })* ] <R_BRACKET>
  { return "[" + s + result + "]"; }
}

String result():
{
    System.out.println("result() called!");
}
{
  < IDENTIFIER > ":" type_spec()
  { return ""; }
}

String result_list():
{
    System.out.println("result_list() called!");
}
{
  result() ("," result())*
  { return ""; }
}

String parameter():
{
  Token token = null;
  String s = "";
  String result = "";
    System.out.println("parameter() called!");
}
{
  token = < IDENTIFIER > { result += token.toString(); } ":" type_spec() ["=" s = literal_expr()] { result = result; return result; }
}

String parameter_list():
{
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("parameter_list() called!");
}
{
  s = parameter() ("," { result += ", "; } s_iter = parameter() { result += s_iter;})*
  { return s + result; }
    
} 

String generic_declaration():
{
	System.out.println("generic_declaration() called!");
}
{
  "<" "?" ["=" type_name()] ">"
  { return ""; }
}

String fragment_declaration():
{
  String result = "";
  String s = "";
  Token token = null;
    System.out.println("fragment_declaration() called!");
}
{
  <FRAGMENT> token = < IDENTIFIER > { result += token.toString(); }
  [ generic_declaration()] <L_PAREN> s = parameter_list() <R_PAREN> { result = result + "(" + s; }
   "->" <L_PAREN> result_list() <R_PAREN> { return result + "):\n\n"; }
}


String fragment_definition():
{
  String result = "";
  String s = "";
    System.out.println("fragment_definition() called!");
}
{
  { result += "def "; }
  s = fragment_declaration() { result += s; } s = body() { result += s; return result; }
}



String lvalue_expr():
{
  Token token = null;
  String s = "";
  String result = "";
    System.out.println("lvalue_expr() called!");
}
{
  (
    token = < IDENTIFIER > { result += token.toString(); } s = tuple_lvalue_expr() { result += s; }
  | s = array_lvalue_expr() { result += s; } s = tuple_lvalue_expr() { result += s; }
   ) { return result; }
  
}


String tuple_lvalue_expr():
{
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("tuple_lvalue_expr() called!");
}
{
  <L_PAREN> s = lvalue_expr() ("," s_iter = lvalue_expr() { result = result + ", " + s_iter; })+
   <R_PAREN> { return "(" + s + result + ")"; } | (("," s_iter = lvalue_expr() { result += s_iter; })+ s = tuple_lvalue_expr() { result += s; } | { })
  { return result; }
}

 
String array_lvalue_expr():
{
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("array_lvalue_expr() called!");
}
{
  <L_BRACKET> [s = lvalue_expr() ("," s_iter = lvalue_expr() { result = result + ", " + s_iter; })* ] <R_BRACKET>
  { return s + result; }
}


String argument():
{
  Token token = null;
  String s = "";
    System.out.println("argument() called!");
}
{
  token = < IDENTIFIER > "=" s = rvalue_expr() { return token.toString() + "=" + s; }
  | s = rvalue_expr() { return s; }
}

String argument_list():
{
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("argument_list() called!");
}
{
  s = argument() ("," { result += ", "; } s_iter = argument() { result += s_iter; })*
  { return s + result; }
}
/*
String invocation():
{
    System.out.println("invocation() called!");
}
{
  < IDENTIFIER > < L_PAREN > argument_list() <R_PAREN>
}
*/
/*
String assignment():
{
  Token l, i;
}
{
  lvalue_expr() "=" invocation() ";"
}
*/

String body():
{
  String s = "";
  String s_iter = "";
  String result = "";
    System.out.println("body() called!");
}
{
  <L_BRACE> ( s_iter = assignment() { result += s_iter; })+ { s = s_iter.split(" ")[0]; } <R_BRACE> { result += "\nreturn " + s;  return result; }
}

String identifier_list():
{
  Token token = null;
  Token token_iter = null;
  String result = "";
    System.out.println("identifier_list() called!");
}
{
  token = < IDENTIFIER > ("," { result += ", "; } token_iter = < IDENTIFIER > { result += token_iter.toString(); })*
  { return token.toString() + result; }
}

String graph_declaration():
{
  Token token = null;
  String s = "";
  String result = "";
    System.out.println("graph_declaration() called!");
}
{
  <GRAPH> token = < IDENTIFIER > <L_PAREN> s = identifier_list() <R_PAREN> "->" <L_PAREN> identifier_list() <R_PAREN>
  { return token.toString() + "(" + s + "):"; }
}

String graph_definition():
{
  String result = "";
  String s = "";
  String[] tmp;
  int i = 0;
    System.out.println("graph_definition() called!");
}
{
  graph_declaration() s = body()
  {
    result += s;
    tmp = result.split("\n");
    i = tmp.length -1;
    result = "";
    for(int j=0;j<tmp.length-1;j++)
    	result += (tmp[j]+"\n");
  }
  { return result; }
}
 

String one_line():
{
	String res = "";
}
{
	(
	  ( res = graph_definition()) { ; } | (res = fragment_definition()) { ; }
	) {
	    return res;
	  }
}


/*
fragment conv_layer(
    input: tensor<scalar>,
    channels: integer,
    size: integer[],
    border: string = 'constant',
    padding: (integer,integer)[] = [],
    stride: integer[] = [],
    dilation: integer[] = [],
    groups: integer = 1,
    use_bias: logical = true,
    scope: string )
-> ( output: tensor<scalar> )
{
    planes = shape_of(input)[1] / groups if groups != 0 else 1;
    filter = variable(label = scope + '/filter',
                      shape = [channels, planes] + size);
    bias = variable(label = scope + '/bias', shape = [1, channels])
           if use_bias else constant(shape = [1], value = [0.0]);

    output = conv(input, filter, bias, border = border, padding = padding,
                  stride = stride, dilation = dilation, groups = groups);
}

| < TYPE_NAME:("tensor"|"integer"|"scalar"|"logical"|"string"|"?") >

| < GRAPH_DEFINITION:(< GRAPH_DECLARATION >)" "(< BODY >) >
| < GRAPH_DECLARATION:"graph"(< IDENTIFIER >)<L_PAREN>(< IDENTIFIER_LIST >)<R_PAREN> "->" <L_PAREN>(< IDENTIFIER_LIST >)<R_PAREN> >

| < IDENTIFIER_LIST:(< IDENTIFIER >)("," (< IDENTIFIER >))* >

| < BODY:<L_BRACE> (< ASSIGNMENT >)+<R_BRACE> >
| < ASSIGNMENT:(< LVALUE_EXPR >|< IDENTIFIER >)"="(< RVALUE_EXPR >) >

| < INVOCATION:(< IDENTIFIER >) (["<" (< TYPE_NAME >) ">"]) (<L_PAREN> (< ARGUEMENT_LIST >) <R_PAREN>) >
| < ARGUMENT_LIST:(< ARGUMENT >)(","< ARGUMENT >)* >
| < ARGUMENT:(< RVALUE_EXPR >) | (< IDENTIFIER >) "=" (< RVALUE_EXPR >)>

| < ARRAY_LVALUE_EXPR:<L_BRACKET>([(< LVALUE_EXPR >)(","(< LVALUE_EXPR >))* ]) <R_BRACKET> >


String one_line():
{
	double a;
}
{
	expr() < EOL >
	{System.out.println(a); }
| < EOL >
| < EOF > { System.exit(-1); }
}
double expr():
{
  double a;
  double b;
}
{
  term()("+" (expr()) { a += b; } | "-" (expr()) { a -= b; })* { return a; }
}

double unary():
{
  double a;
}
{
  "-" element() { return -a; } | element() { return a; }
}
double element():
{
  Token t;
  double a;
}
{
  t = < NUMBER > { return Double.parseDouble(t.toString()); }
| <L_PAREN> expr() <R_PAREN> { return a; }
}
*/